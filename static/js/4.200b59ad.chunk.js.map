{"version":3,"sources":["Detail.js"],"names":["박스","styled","div","제목","h4","props","색상","TabContent","useEffect","스위치변경","누른탭","Info","재고","connect","store모든데이터들","state","reducer","alert열렸니","reducer2","useState","alert","setAlert","inputData","setInputData","누른탭변경","스위치","setTimeout","id","useParams","찾은상품","shoes","find","상품","history","useHistory","className","onChange","e","target","value","src","width","title","content","price","onClick","재고변경","dispatch","type","payload아무렇게나","name","quan","push","goBack","variant","defaultActiveKey","Item","Link","eventKey","in","timeout"],"mappings":"4NAiBIA,EAAKC,IAAOC,IAAV,+CAIFC,EAAKF,IAAOG,GAAV,gEAEO,SAAAC,GAAK,OAAIA,EAAMC,gBAmI1B,SAASC,EAAWF,GAMlB,OAJAG,qBAAW,WACTH,EAAMI,gCAAM,MAGG,IAAdJ,EAAMK,mBACA,gFACc,IAAdL,EAAMK,mBACN,+EACc,IAAdL,EAAMK,mBACN,oFADH,EAKR,SAASC,EAAKN,GACZ,OACE,gDAASA,EAAMO,aAAG,MA2BTC,uBAXb,SAAsBC,GACpB,MAAO,CAGHC,MAAQD,EAAYE,QACpBC,0BAAWH,EAAYI,YAMhBL,EAvJf,SAAgBR,GAGd,MAAuBc,oBAAS,GAAhC,mBAAKC,EAAL,KAAWC,EAAX,KACA,EAAgCF,mBAAS,IAAzC,mBAAKG,EAAL,KAAgBC,EAAhB,KAGA,EAAmBJ,mBAAS,GAA5B,mBAAKT,EAAL,KAAUc,EAAV,KAIA,EAAmBL,oBAAS,GAA5B,mBAAKM,EAAL,KAAUhB,EAAV,KAEAD,qBAAW,WACTkB,YAAW,WAAQL,GAAS,KAAU,OAKtC,IAIF,IAAKM,EAAMC,cAAND,GAGCE,EAAOxB,EAAMyB,MAAMC,MAAK,SAASC,GACrC,OAAOA,EAAGL,IAAMA,KAIdM,EAAUC,cAKd,OACI,sBAAKC,UAAU,YAAf,UACE,cAAC,EAAD,UAEE,cAAC,EAAD,CAAIA,UAAU,MAAd,sBAGDb,EACD,uBAAOc,SAAW,SAACC,GAAMd,EAAac,EAAEC,OAAOC,WAInC,IAAVnB,EAEE,qBAAKe,UAAU,YAAf,SACE,8GAGH,KAIH,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKK,IAAI,iDAAiDC,MAAM,WAIlE,sBAAKN,UAAU,gBAAf,UACE,oBAAIA,UAAU,OAAd,SAAuBN,EAAKa,QAC5B,4BAAKb,EAAKc,UACV,4BAAKd,EAAKe,QAKV,cAACjC,EAAD,CAAM,eAAIN,EAAMO,eAEhB,wBAAQuB,UAAU,iBAAiBU,QAAS,WAC1CxC,EAAMyC,yBAAK,CAAC,EAAE,GAAG,KACjBzC,EAAM0C,SAAS,CAAEC,KAAM,2BAAQC,wCAAa,CAACtB,GAAGE,EAAKF,GAAIuB,KAAKrB,EAAKa,MAAOS,KAAK,KAC/ElB,EAAQmB,KAAK,UAHf,sCAKA,wBAAQjB,UAAU,iBAAiBU,QAAU,WAAKZ,EAAQoB,UAA1D,4CAMV,eAAC,IAAD,CAAKlB,UAAU,OAAOmB,QAAQ,OAAOC,iBAAiB,SAAtD,UACE,cAAC,IAAIC,KAAL,UACA,cAAC,IAAIC,KAAL,CAAUC,SAAS,SAASb,QAAS,WAAKpC,GAAM,GAAQe,EAAM,IAA9D,sBAEA,cAAC,IAAIgC,KAAL,UACA,cAAC,IAAIC,KAAL,CAAUC,SAAS,SAASb,QAAS,WAAKpC,GAAM,GAAQe,EAAM,IAA9D,2BAIJ,cAAC,IAAD,CAAemC,GAAIlC,EAAKU,UAAU,MAAMyB,QAAS,IAAjD,SACE,cAACrD,EAAD,CAAY,qBAAKG,EAAK,iCAAOD","file":"static/js/4.200b59ad.chunk.js","sourcesContent":["/* eslint-disable */\r\n\r\nimport React, { useEffect, useState, useContext } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { Nav } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport './App.css';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport \"./Detail.css\";\r\n// import {재고context} from './App.js';\r\n\r\n// npm install node-sass\r\nimport './Detail.css';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\nlet 박스 = styled.div`\r\n  padding : 20px;\r\n`;\r\n\r\nlet 제목 = styled.h4`\r\n  font-size : 25px;\r\n  color : ${ props => props.색상 }\r\n`;\r\n\r\n\r\n\r\n// class Detail2 extends React.Component{\r\n//   componentDidMount(){\r\n//   }\r\n//   componentWillUnmount(){\r\n//   }\r\n// }\r\n\r\n\r\n// 1. 누가 Detail page 에 들어가면 URL 파라미터를 득\r\n// 2. 근데 0이나 1이나 이미 그런게 있으면 또 추가 안되게\r\n// 3. localStorage 에 있는 항목을 꺼냄\r\n// 4. 경우가 두가지가 있겠네 getItem 하면 null 이 아노거나 [] 나오거나\r\n// 5. [] 가 나오면 거기에 URL 파라미터의 ID 부분은 push() 함 (추가함)\r\n// 6. 중복되는 숫자는 또 추가 안되게 처리하기 (ex set 자료형 한번 보자)\r\n// 7. 그러면 [] 를 다시 localStorage 에 저장함 (따옴표쳐서)\r\n// 8. 옆에 UI 만들어서 나오게 하기\r\n\r\n\r\n\r\nfunction Detail(props){\r\n  \r\n\r\n  let [alert,setAlert] = useState(true);\r\n  let [inputData, setInputData] = useState('');\r\n  // 웹사이트 바뀔때마다 뭐 되는지 체크하려고 ↑ 만들어봄//\r\n\r\n  let [누른탭, 누른탭변경] = useState(0);\r\n\r\n  // let 재고 = useContext(재고context);\r\n\r\n  let [스위치, 스위치변경] = useState(false);\r\n\r\n  useEffect( ()=>{\r\n    setTimeout(() => { setAlert(false) }, 2000);\r\n    // return ()=>{ clearTimeout(타이머)}\r\n  \r\n  // return 넣으면 사라질때 액션//\r\n  // return function 어쩌구() {실행할 코드~~}\r\n  },[]);\r\n  // [alert] 하면 alert 가 업데이트 될때만 다시 렌더링. [alert] 말고 [] 라고해놓으면 이게 업데이트 될일 없으니 한번만 렌더함\r\n  // }),[ alert, inputData 등등 다 넣어도됨];\r\n\r\n  let {id} = useParams();\r\n\r\n  // 이게 뭘 의미하는거죠? // \r\n    let 찾은상품 = props.shoes.find(function(상품){\r\n    return 상품.id == id\r\n  });\r\n\r\n  //useHistory게 라이브러리에 있음//\r\n  let history = useHistory(); \r\n  \r\n\r\n\r\n\r\n  return(\r\n      <div className=\"container\">\r\n        <박스>\r\n          {/* <제목 색상={'red'}>Detail</제목> */}\r\n          <제목 className='red'>Detail</제목>\r\n        </박스>\r\n\r\n        {inputData}\r\n        <input onChange={ (e)=>{ setInputData(e.target.value) } }/>\r\n\r\n\r\n        {\r\n          alert === true\r\n          ? (\r\n            <div className='my-alert2'>\r\n              <p >재고가 얼마 남지 않았습니다</p>\r\n            </div>\r\n          )\r\n          :null\r\n        }\r\n      \r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\r\n          </div>\r\n\r\n\r\n          <div className=\"col-md-6 mt-4\">\r\n            <h4 className=\"pt-5\">{ 찾은상품.title }</h4>\r\n            <p>{ 찾은상품.content }</p>\r\n            <p>{ 찾은상품.price }</p>\r\n            {/* <h4 className=\"pt-5\">{ props.shoes[id].title }</h4> */}\r\n            {/* <p>{ props.shoes[id].content }</p> */}\r\n            {/* <p>{ props.shoes[id].price }</p> */}\r\n\r\n            <Info 재고={props.재고}></Info>\r\n\r\n            <button className=\"btn btn-danger\" onClick={()=>{\r\n              props.재고변경([9,11,12]);\r\n              props.dispatch({ type: '항목추가', payload아무렇게나:{id:찾은상품.id, name:찾은상품.title, quan:1}})\r\n              history.push('/cart');\r\n            }}>주문하기</button> \r\n            <button className=\"btn btn-danger\" onClick={ ()=>{history.goBack()} }>뒤로가기</button> \r\n            {/* <button className=\"btn btn-danger\" onClick={ ()=>{history.push('/')} }>뒤로가기</button>  */}\r\n          </div>\r\n\r\n        </div>\r\n\r\n  <Nav className='mt-5' variant=\"tabs\" defaultActiveKey='link-0'>\r\n    <Nav.Item>\r\n    <Nav.Link eventKey=\"link-0\" onClick={()=>{스위치변경(false); 누른탭변경(0)}}>Active</Nav.Link>\r\n    </Nav.Item>\r\n    <Nav.Item>\r\n    <Nav.Link eventKey=\"link-1\" onClick={()=>{스위치변경(false); 누른탭변경(1)}}>Option 2</Nav.Link>\r\n    </Nav.Item>\r\n  </Nav>\r\n\r\n<CSSTransition in={스위치} className=\"wow\" timeout={500}>\r\n  <TabContent 누른탭={누른탭} 스위치변경={스위치변경} />\r\n</CSSTransition>\r\n\r\n  \r\n\r\n\r\n{/* closing line */}\r\n</div> \r\n    )\r\n  }\r\n\r\n\r\n  function TabContent(props){\r\n\r\n    useEffect( ()=>{\r\n      props.스위치변경(true)\r\n    });\r\n\r\n    if(props.누른탭 === 0){\r\n      return <div> 0번째 내용입니다</div>\r\n    }else if(props.누른탭 === 1){  \r\n      return <div>1번째 내용입니다</div>\r\n    }else if(props.누른탭 === 2){\r\n      return <div>2번째 내용입니다</div>\r\n    }\r\n    }\r\n  \r\n  function Info(props){\r\n    return(\r\n      <p>재고 : {props.재고[0]}</p>\r\n    )\r\n  }\r\n\r\n  function Alert(){\r\n    return(\r\n    <div className='my-alert'>\r\n      <p>재고가 얼마 남지 않았습니다</p>\r\n    </div>\r\n    )\r\n  }\r\n\r\n\r\n\r\n \r\n  // export default Detail;\r\n  function state를props화(store모든데이터들){\r\n    return {\r\n        // 상품명 : state[0].name\r\n        // state : store모든데이터들\r\n        state : store모든데이터들.reducer,\r\n        alert열렸니 : store모든데이터들.reducer2\r\n\r\n        // ↑차라리 모든 스테이트를 스테이트로 쓰겠습니다 //\r\n    }\r\n}\r\n\r\nexport default connect(state를props화)(Detail)\r\n// export default Cart;"],"sourceRoot":""}